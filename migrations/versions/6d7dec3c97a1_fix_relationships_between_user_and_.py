"""Fix relationships between User and APIUsage

Revision ID: 6d7dec3c97a1
Revises: d0c392698ef5
Create Date: 2025-02-16 22:47:35.674650

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6d7dec3c97a1'
down_revision: Union[str, None] = 'd0c392698ef5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def table_exists(table_name: str) -> bool:
    """Check if a table exists in the database."""
    conn = op.get_bind()
    result = conn.execute(
        sa.text(f"SELECT to_regclass('{table_name}')")
    )
    return result.scalar() is not None

def index_exists(index_name: str, table_name: str) -> bool:
    """Check if an index exists in the database."""
    conn = op.get_bind()
    result = conn.execute(
        sa.text(f"SELECT 1 FROM pg_indexes WHERE tablename='{table_name}' AND indexname='{index_name}'")
    )
    return result.scalar() is not None

def upgrade() -> None:
    """Upgrade database schema changes"""

    # Drop index only if it exists
    if index_exists('ix_api_logs_id', 'api_logs'):
        op.drop_index('ix_api_logs_id', table_name='api_logs')

    # Drop table only if it exists
    if table_exists('api_logs'):
        op.drop_table('api_logs')

    if index_exists('ix_api_usage_id', 'api_usage'):
        op.drop_index('ix_api_usage_id', table_name='api_usage')

    if index_exists('ix_api_usage_tool_name', 'api_usage'):
        op.drop_index('ix_api_usage_tool_name', table_name='api_usage')

    if table_exists('api_usage'):
        op.drop_table('api_usage')


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('api_usage',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tool_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('used_calls', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='api_usage_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='api_usage_pkey')
    )
    op.create_index('ix_api_usage_tool_name', 'api_usage', ['tool_name'], unique=False)
    op.create_index('ix_api_usage_id', 'api_usage', ['id'], unique=False)
    op.create_table('api_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tool_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('response_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('request_payload', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('response_status', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='api_logs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='api_logs_pkey')
    )
    op.create_index('ix_api_logs_id', 'api_logs', ['id'], unique=False)
    # ### end Alembic commands ###
